<template>
	<div>

		<div class="main-padding stor-var">
			<div class="auth-row">
				<p class="back-title">
					<span><i></i>部门列表</span>
					<el-button round icon="el-icon-plus" size="small" @click="addDialog">新增记录</el-button>
				</p>
				<el-table :data="tableData" height="100%" style="width:100%">
					<el-table-column prop="department_id" label="编号" align="center" width=""></el-table-column>
					<el-table-column prop="department_name" label="部门" align="center" width=""></el-table-column>
          <el-table-column :formatter="superiorDepartmentFormatter" prop="superior_department" label="上级部门" align="center" width=""></el-table-column>
					<el-table-column label="操作" align="center" width="180px">
						<template slot-scope="scope">
							<el-button size="mini" round @click="editDialog(scope.row,$event)"><i class="back-i-bulr"></i>编辑</el-button>
							<el-button size="mini" round @click="del(scope.row,$event)"><i class="back-i-red"></i>删除</el-button>
						</template>
					</el-table-column>
				</el-table>
				<div class="block">
					<el-pagination @current-change="tablePageChange" :current-page.sync="tableFormData.page" :page-count="tablePageTotal" layout="prev, pager, next, slot, jumper">
            <span class="el-pagination__total page-count-padding">共{{tablePageTotal}}页</span>
          </el-pagination>
				</div>
			</div>
		</div>

		<!--新增弹窗-->
		<el-dialog title="新增部门信息" :append-to-body='true' :lock-scroll="true" :modal="true" :close-on-click-modal="false" :visible.sync="addDialogVisiable" width="30%" top="30vh">
			<el-form ref="addFormData" :model="addFormData" label-width="80px">
				<el-col :span="24">
					<el-form-item label="上级部门">
						<el-select v-model="addFormData.add_department.superior_departmentID">
              <el-option v-for="item in departmentList" :label="item.department_name" :value="item.department_id"></el-option>
            </el-select>
					</el-form-item>
				</el-col>
				<el-col :span="24">
					<el-form-item label="部门名称">
						<el-input v-model="addFormData.add_department.department_name"></el-input>
					</el-form-item>
				</el-col>
				<el-col :span="24">
					<el-form-item label="部门描述">
            <el-input v-model="addFormData.add_department.summary" type="textarea"></el-input>
					</el-form-item>
				</el-col>
			</el-form>
			<span slot="footer" class="dialog-footer">
        <el-button @click="addDialogVisiable = false">取 消</el-button>
        <el-button type="primary" :loading="adding" size="small" round @click="add">确 定</el-button>
      </span>
		</el-dialog>

		<!--编辑弹窗-->
		<el-dialog title="编辑" :append-to-body='true' :lock-scroll="true" :modal="true" :close-on-click-modal="false" :visible.sync="editDialogVisiable" width="30%">
			<el-form ref="editFormData" :model="editFormData" label-width="80px">
        <el-col :span="24">
          <el-form-item label="上级部门">
            <el-select v-model="editFormData.edit_department.superior_departmentID">
              <el-option v-for="item in departmentList" :label="item.department_name" :value="item.department_id"></el-option>
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="24">
          <el-form-item label="部门名称">
            <el-input v-model="editFormData.edit_department.department_name"></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="24">
					<el-form-item label="部门描述">
						<el-input v-model="editFormData.edit_department.summary" type="textarea"></el-input>
					</el-form-item>
				</el-col>
			</el-form>
			<span slot="footer" class="dialog-footer">
        <el-button right @click="editDialogVisiable = false">取 消</el-button>
        <el-button type="primary" :loading="editing" @click="edit">确 定</el-button>
      </span>
		</el-dialog>

	</div>

</template>

<script>
  import {common} from '../../../common/js/common.js'
	export default {
		name: "information",
		data() {
			return {
        departmentList: [{ "department_name":"无", "department_id" : "0"}],
        departmentFormData: {
          user_id: common().config.userId,
          build_id: this.$BuildId,
        },
				//列表显示
				tableData: [],
        tablePageTotal: 1,
        tableFormData: {
          user_id: common().config.userId,
          build_id: this.$BuildId,
          page: 1
        },
        //新增
        adding: false,
        addDialogVisiable: false,
        addFormData: {
          user_id: common().config.userId,
          build_id: this.$BuildId,
          add_department: {
            department_name: "",
            superior_departmentID: "0",
            superior_department: "",
            summary: "",
          }
        },
				//编辑
        editing: false,
        editDialogVisiable: false,
        editFormData: {
          user_id: common().config.userId,
          build_id: this.$BuildId,
          edit_department: {
            department_id: "",
            department_name: "",
            superior_department: "",
            superior_departmentID: "",
            summary: ""
          }
        },
        //删除
        deleteFormData: {
          user_id: common().config.userId,
          build_id: this.$BuildId,
          delete_department: {
            department_id: "",
            department_name: ""
          }
				}
			}
		},
    mounted() {
      this.departmentInfoLoad();
      this.tableUpdate();
    },
		methods: {
      superiorDepartmentFormatter(row, column, cellValue) {
        return (cellValue? cellValue : '无');
      },
      departmentInfoLoad() {
        this.$http({
          method: 'post',
          url: `${this.$Api}/GOSSystem/getDepartmentInfoSpeedy`,
          params: this.departmentFormData
        }).then(response => {
          if(response.data.result === 1) {
            this.departmentList = this.departmentList.concat(response.data.department_list);
          }
        }).catch((error) => {
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });
      },
		  //列表显示
			tableUpdate() {
				this.$http({
          method: 'post',
          url: `${this.$Api}/GOSSystem/getDepartmentInfo`,
          params: this.tableFormData
        }).then(response => {
          this.tableData = response.data.department_list;
          this.tablePageTotal = response.data.total_page;
        }).catch((error) => {
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });
			},
      tablePageChange(page) {
        // console.log(`当前页: ${page}`);
        this.tableUpdate();
      },
      //新增功能
      addDialog() {
        this.addDialogVisiable = true;
        this.addFormData.add_department = {
          department_name: "",
          superior_departmentID: "0",
          superior_department: "",
          summary: "",
        };
      },
      add() {
        if(!this.addFormData.add_department.department_name) {
          this.$message({
            title: '注意',
            message: '部门名称不能为空',
            duration: 2000,
            type: 'warning'
          });
          return;
        }
        this.adding = true;
        this.$http({
          method: 'post',
          url: `${this.$Api}/GOSSystem/addDepartmentInfo`,
          params: this.addFormData
        }).then(response => {
          this.adding = false;
          if(response.data.result === 1) {
            this.$notify({
              title: '成功',
              message: response.data.msg,
              duration: 2000,
              type: 'success'
            });
            this.addDialogVisiable = false;
            this.departmentInfoLoad();
            this.tableUpdate();
          } else{
            this.$notify({
              title: '添加失败',
              message: response.data.msg,
              duration: 2000,
              type: 'error'
            });
          }
        }).catch((error) => {
          this.adding = false;
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });
      },
      //编辑功能
			editDialog(row, event) {
				event.cancelBubble = true;
				this.editDialogVisiable = true;
				this.editFormData.edit_department = { //直接赋值可能是因为elenmet 方法把row进行数据绑定了
          department_id: row.department_id,
          department_name: row.department_name,
          superior_department: row.superior_department,
          superior_departmentID: row.superior_dpID,
          summary: row.summary
				};
			},
			edit() { //导致row会全局引用
        if(!this.editFormData.edit_department.department_name) {
          this.$message({
            message: '部门名称不能为空',
            duration: 2000,
            type: 'warning'
          });
          return;
        }
				this.editing = true;
				this.$http({
          method: 'post',
          url: `${this.$Api}/GOSSystem/editDepartmentInfo`,
          params: this.editFormData
        }).then(response => {
          this.editing = false;
          if(response.data.result === 1) {
            this.editDialogVisiable = false;
            this.$notify({
              title: '成功',
              message: response.data.msg,
              duration: 2000,
              type: 'success'
            });
            this.departmentInfoLoad();
            this.tableUpdate();
          } else {
            this.$notify({
              title: '编辑失败',
              message: response.data.msg,
              duration: 2000,
              type: 'error'
            });
          }
        }).catch((error) => {
          this.editing = false;
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });
			},
      //删除功能
			del(row, event) {
        event.cancelBubble = true;
        this.$confirm('此操作将永久删除该部门, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.deleteFormData.delete_department = {
            department_id: row.department_id,
            department_name: row.department_name
          };
          this.$http({
            method: 'post',
            url: `${this.$Api}/GOSSystem/deleteDepartmentInfo`,
            params: this.deleteFormData
          }).then(response => {
            if(response.data.result === 1) {
              this.$notify({
                type: 'success',
                title: '成功',
                message: response.data.msg,
                duration: 2000
              });
              this.departmentInfoLoad();
              this.tableUpdate();
            } else {
              this.$notify({
                type: 'error',
                title: '删除失败',
                message: response.data.msg,
                duration: 2000
              });
            }
          }).catch((error) => {
            this.$notify({
              title: 'ERROR',
              message: `${error}`,
              duration: 2000,
              type: 'error'
            });
          });
        }).catch(() => {
          // console.log('取消删除');
        });
			}
		}
	}
</script>

<style scoped lang="scss">
	@import "../../../style/variables.scss";
	.back-nav {
		background: #fff;
		padding: 12px 20px;
		margin: 0px;
		margin-bottom: 20px;
	}

	.auth-row {
		display: flex;
		height: calc(100% - 120px);
		/*width: calc(100% - 226px);*/
		width: 100%;
		flex-direction: column;
		.el-table {
			flex: 6 0 auto;
		}
		.back-title {
			flex: 1 0 auto;
			float: left;
			text-align: right;
			line-height: 30px;
			margin-bottom: 10px;
			width: 100%;
			span {
				float: left;
				color: #7362e4;
				i {
					display: inline-block;
					height: 18px;
					float: left;
					background: #7362e4;
					width: 3px;
					margin-right: 6px;
					position: relative;
					top: 6px;
				}
			}
		}
		.block {
			flex: 1 0 auto;
			text-align: center;
			margin: 20px 0px;
		}
	}

	.back-i-bulr {
		display: inline-block;
		height: 10px;
		width: 10px;
		border-radius: 25px;
		margin-right: 6px;
		background: $green;
	}

	.back-i-red {
		display: inline-block;
		height: 10px;
		width: 10px;
		margin-right: 6px;
		border-radius: 25px;
		background: $red;
	}
</style>
