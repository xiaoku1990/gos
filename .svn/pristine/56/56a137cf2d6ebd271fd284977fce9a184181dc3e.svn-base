<template>
  <div class="par-state main-padding">
    <div class="state-one">
      <div class="state-top">
        <div class="state-round">{{floorName}}<div class="state-box"></div></div>
      </div>
      <div class="state-bottom">
        <div class="vipCar">
          <ul>
            <li>VIP车位</li>
            <li>
              <span v-for="item in vipCarList" :key="item.carpos_gid">
                {{item.carpos_name}}
              </span>
            </li>
          </ul>
        </div>
        <transition name="el-zoom-in-top">
           <div class="vipCarInfo" v-show="carInfoShow" >
           <ul>
            <li>车位信息</li>
            <li v-show="!addModel">
                <el-button v-show="edit" type="primary" size="small" @click="startEdit()">编辑</el-button>
                <el-button v-show="editModel" type="danger" size="small" @click="canaleEdit()">结束编辑</el-button>
                <el-button v-show="editModel" type="primary" size="small" @click="delVisible=true">删除车位</el-button>
            </li>
            <li>
              车位号 : {{VipCarInfo.carNum}}&nbsp;&nbsp;
              分区号 : {{VipCarInfo.carArea}}
            </li>
            <li>
              车牌号:
              <span v-for="(itemTwo,index) in vipCar_numbers" :key="index">
                {{itemTwo}}&nbsp;&nbsp;<i class="el-icon-error" @click="deleteCarNumsList(vipCar_numbers,itemTwo,index)"></i>
              </span>
            </li>
            <transition name="el-zoom-in-top">
              <li v-show="carNumShow">
                添加车牌号:&nbsp;&nbsp;
                <el-input class="elInput"
                  placeholder="请输入内容"
                          size="mini"
                          auto-complete
                          maxlength="8"
                          minlength="1"
                  v-model="inputCarnum">
                </el-input>
                <el-button type="primary" size="small" @click="addCarnums()">&nbsp;&nbsp;添加&nbsp;&nbsp;</el-button>
              </li>
            </transition>
            <transition name="el-zoom-in-top">
              <li v-show="submitShow">
                <el-button type="primary" size="small" @click="submit()">&nbsp;&nbsp;提交&nbsp;&nbsp;</el-button>
              </li>
            </transition>
          </ul>
           </div>
        </transition>
      </div>
    </div>
    <div class="state-tor" id="mapDiv">
      <div class="the-map" id="map" ref="mybox">
      </div>
      <div class="button" >
        <el-button type="primary" v-show="!addModel"  round size="medium" @click="addVipCarModel()">添加VIP车位</el-button>
        <div class="buttonSon" v-show="addModel">
          <div class="sonbt">
            <el-button  type="danger" round size="medium" @click="canaleVipCarModel()">取消添加</el-button>
          </div>
          <!--<div class="sonbt">
            <el-button  type="primary" round size="medium" @click="addScreenCar" >确认添加</el-button>
          </div>-->
        </div>
      </div>
      <img src="../../../static/img/up.png" alt="up" @click="upFloor()" class="up">
      <div id="floor">
        <ul id="floorUl" ref="floorUl"></ul>
      </div>
      <img src="../../../static/img/down.png" alt="down" @click="downFloor()" class="down">
      <!--<button class="map-button" @click="nextFloor()">下一层</button>-->
      <!--<button  class="map-button" style=" top: 70%" @click="openDialog" >弹出</button>-->
      <!--<button  class="map-button" style=" top: 30%" @click="mapImg" >地图弹框</button>-->
      <!---->
    </div>
    <!--消息弹窗-->
    <!-- <dialog-msg :title="diaglogMsg" :msgType="0" :msgData="diagloMsg" @getAll="parkinMsg"  v-if="dialogVisible">

     </dialog-msg>-->
    <!--地图弹窗-->
    <el-dialog
      class="imgSrcDialog"
      title="查看图片"
      :append-to-body='true' :lock-scroll="true" :modal="true"
      :close-on-click-modal="false"
      :visible.sync="mapVehicle"
      @close='mapDialog'
      top="35vh"
      width="30%"
    >
      <div class="map-img">
        <img v-bind:src="carNumberSrc">
      </div>

    </el-dialog>
    <!--提交弹框-->
    <!--提交提示框-->
    <el-dialog
      title="是否提交"
      :visible.sync="submitVisible"
      :lock-scroll="true"
      top="30vh"
      width="26%"
      :append-to-body='true'
      >
      <span>确认要提交车位信息吗?</span>
      <span slot="footer" class="dialog-footer">
    <el-button @click="submitVisible = false">取 消</el-button>
    <el-button type="primary" @click="confirmSubmit()">确 定</el-button>
  </span>
    </el-dialog>
   <!--删除提示框-->
    <el-dialog
      title="是否删除车位"
      :visible.sync="delVisible"
      :lock-scroll="true"
      top="30vh"
      width="26%"
      :append-to-body='true'
    >
      <span>确认要删除该车位吗?</span>
      <span slot="footer" class="dialog-footer">
    <el-button @click="delVisible = false">取 消</el-button>
    <el-button type="primary" @click="confirmDel()">确 定</el-button>
  </span>
    </el-dialog>

  </div>
</template>

<script>
  import  { module } from "../../../static/ol/findMapOOB";
  //---------------------------------

  export default {
    name: "parking-state",
    components:{

    },
    data(){
      return{
        provice : ['京', '津', '沪', '渝', '翼', '豫', '云', '辽', '黑', '湘', '皖', '鲁', '新', '苏', '浙', '赣', '鄂', '桂', '甘', '晋', '蒙', '陕', '吉', '闽', '贵', '粤', '青', '藏', '川', '宁', '琼'],
        stateMsg:true,
        mapVehicle:false,
        userInfo: {}, // 用户信息
        changeColor:'#cccccc',//点击index后更改颜色
        featureDate:'',//点击后获取的要素数据
        oldFeatureDate:'',// 点击过的旧要素
        carNumberSrc:'',//车牌图片路径
        popupLayer:'',//地图信息层
        parkMap:'',//引导屏管理地图
        carInfoShow: false, // 车位信息(1,非添加模式下,是否点击Vip车位;2.添加模式下，是否点击了非VIP车位)
        carNumShow : false, // 是否显示添加车牌列表(默认是关)
        edit: true, //编辑按钮是否显示(默认显示)
        editModel: false, // 编辑模式(默认不显示)
        addModel: false, // 添加模式(默认是关闭的)
        submitShow : false, // 提交按钮 (默认是关闭的)
        submitVisible: false, // 提交弹框是否显示
        delVisible: false, // 删除框提示是否显示;
        inputCarnum:'', // 绑定输入的车牌号
        VipCarInfo:{}, // vip车位信息
        vipCar_numbers: [], // vip车牌数组
        //当前楼层名称
        floorName:"",
        floorId:"",//楼层ID
        //占用数，空余数，超时停车，黑名单，违规停车，特殊车辆显示数据
        stateData:[],
        vipCarList:[ // VIP 模拟的车位
          {
            "carpos_name" : "A001",
            "carpos_gid" : "LS066A001",
            "car_numbers" : ["沪A12345","沪B54321","沪C78321"],
            "carpos_areaID" : "6"
          },
          {
            "carpos_name" : "005",
            "carpos_gid" : "LS064005",
            "car_numbers" : ["沪A12345","沪B54321","沪C54321"],
            "carpos_areaID" : "4"
          },
          {
            "carpos_name" : "A003",
            "carpos_gid" : "LS063A003",
            "car_numbers" : ["沪A12345","沪B54321","沪C54321"],
            "carpos_areaID" : "3"
          }
        ],
        batchAdd:true,//批量添加的标识;
        addVipCarArr:[]//添加的vip车位数组
      }
    },
    created(){
      var userInfo = localStorage.getItem('userInfo')
      this.userInfo = JSON.parse(userInfo)
      let url=this.$Api+'/GOSSystem/vipCarList';
      let userId=this.userInfo.user_id;
      let floorId=this.floorId!=null&&this.floorId!=undefined&&this.floorId!="" ? this.floorId : "Lx01";
      console.log(this.floorId);
      // 获取VIP车位列表
      //this.getVipCarList(url,this.$BuildId,this.floorId,userId);
      //  获取用户的信息


    },
    mounted(){
      //创建地图

      //console.log(this.$Api);
      var parkThis=this;

      this.pushTaggle = localStorage.getItem('messagePush')==='true';

      //console.log(parkThis.dialogVisible);

      var b_map=new module.BeefindMap({
        "target": this.$refs.mybox,
        "floorUl":this.$refs.floorUl,
        'mapType':'screenControl',
        'urlLocal':this.$Api,
        "city_id":this.$CityId,//城市城市ID
        "build_id":this.$BuildId,//項目ID
        "floor_id" :'',//樓層ID
        "floorBarVisible":true,//楼层控件
        "carLayerVisible":true,//车位层是否显示(默认显示)
        "carPortLayerVisible":true,//车位号层是否显示(默认显示)
        "interLayerVisible":true,//兴趣点层是否显示(默认显示)
        "deviceLayerVisible":false,//设备层是否显示(默认不显示)
        "deviceLayerVisible":false//设备层是否显示(默认不显示)
      });
      parkThis.parkMap=b_map;

      //console.log(b_map.floorId);

      parkThis.floorId=b_map.floorId;

      //popup
      var popup = new ol.Overlay({
        element: parkThis.$refs.popup,
        positioning: 'top-center',
        stopEvent: true,
        offset: [0, -25]
      });
      //
      parkThis.popupLayer=popup;
      //
      parkThis.parkMap.addOverlay(parkThis.popupLayer);


      parkThis.parkMap.on('singleclick',function (event) {
        //console.log(event)

        var feature = parkThis.parkMap.forEachFeatureAtPixel(event.pixel, function (feature) {
          return feature;
        });
        console.log(feature);
        if (feature) {
          parkThis.featureDate=feature;
          /*
           *逻辑: 0.9判断点击的是否为车位;
           *    1.1判断是否开启添加;true ? 按钮变化为两个 : 一个按钮;
           *    1.2 判断是否为VIP车位;
           *    1.3判断是否为选中的车位;choseCar?true:false;
           *    1.4添加选中状态;
           *    1.5把选择的车位信息保存起来!
           */
          if(feature.type=='car'||feature.type=='carEvent'){//0.9

              if(parkThis.addModel){//1.1

                //parkThis.carInfoShow = true; // 2,添加模式下，点击非VIP车位,显示车位为信息
                if(!feature.VipCar){
                  parkThis.carInfoShow = true;
                  if(!feature.choseCar){//1.3
                    //如果点击的是同一个车位就不变颜色
                    if(parkThis.oldFeatureDate){
                       parkThis.oldFeatureDate.setCarColor('#969696');
                    };
                    //
                    if(feature.type=='car'){//添加选中要素;
                      feature.setCarColor('#7460ee');//1.4
                    }else{
                      feature=module.findCarFeature(feature);
                      feature.setCarColor('#7460ee');//1.4
                    };
                    parkThis.oldFeatureDate=feature;

                    //1.4如果车位已经添加，就不要加数组,同时取消添加状态(如果添加出错!);
                    parkThis.VipCarInfo = feature;
                    parkThis.vipCar_numbers = parkThis.VipCarInfo.car_numbers; // VIP车牌数组
                    parkThis.filterFeature(feature);//


                    //parkThis.addScreenCarArr.push(feature);
                    //console.log(parkThis.addScreenCarArr);
                  }else {

                    parkThis.warn('该车位已添加,请选择其他车位!');
                  };
                }else{
                  parkThis.carInfoShow = false;
                  parkThis.warn('该车位已添加,请选择其他车位!');
                };


              }else{

                /*
                * (在这里做删除车位要素操作);
                * 1.0首先判断是否为VIP车位;
                * 1.1如果是VIP车位，就把车位要素保存;
                * */
                if(feature.VipCar){
                  console.log('为VIP车位!');//1.0
                  let coordinates = feature.carposPoint;
                  parkThis.VipCarInfo = feature;
                  module.addVipIcon(parkThis.VipCarInfo);
                  parkThis.carInfoShow = true; // 1,非添加模式下，点击VIP车位,显示车位信息
                  parkThis.vipCar_numbers = parkThis.VipCarInfo.car_numbers; // VIP车牌数组
                  console.log(parkThis.VipCarInfo);
                }else{
                  parkThis.warn('请开启添加按钮!');
                  module.addVipIcon(null);
                  parkThis.carInfoShow = false; // 1,非添加模式下，点击非VIP车位,隐藏车位为信息
                };

              };


          }else {
            module.addVipIcon(null);
            parkThis.warn('请点击你要添加的车位!');
          };
          //localStorage.setItem('clickMap','4');
        }else{
          return;
        };//edit
        //
      });
      //
      parkThis.initParkInfo(parkThis.parkMap.floor,parkThis.parkMap.carpos_sum);
      //module.addScreen(null);
      //
      module.setVipCarColor(parkThis.vipCarList,'#ffc6ee'); // 初始化时候绘制VIP车位
    },
    beforeDestroy(){
      const mapThis=this;
      mapThis.parkMap.removeEventListener('singleclick');
      //
      module.clearStateInter();// 清除全局定时器;
      mapThis.parkMap="";
      module.addVipIcon(null);
    },
    methods:{
      //地图弹窗
      mapImg(){
        this.mapVehicle=true
      },
      mapDialog(){
        this.mapVehicle=false
      },
      //初始化查询出来的占用数，空余数，超时停车，黑名单，违规停车，特殊车辆显示数据
      initParkInfo(floorName,sumDate){

        //console.log(floorName);
        //
        let date=sumDate;
        //

        this.floorName=floorName; // 改变楼层
      },
      deleteCarNumsList(val,valT,index){ // 删除车位列表
        /*
        * 编辑模式/添加模式下，我才能进行删除,否侧只能浏览不能删除
        *
        * this.edit
        *
        * */
        if(this.editModel||this.addModel){
          val.splice(index,1);
        }else{
          this.warn('如何想删除车牌,请进入编辑模式!');
        };//

      },
      submit() {
        // 提交按钮
         this.submitVisible = true;
      },
      stateClose(){
        // console.log('我关闭了')
      },
      stateClick(){
        // console.log('查看')
      },
      //下一层
      upFloor(){
        var self=this;
        let userId=self.userInfo.user_id;
        let url=self.$Api+'/GOSSystem/vipCarList';

        console.log(url);
        let floorId=this.floorId!=null&&this.floorId!=undefined&&this.floorId!="" ? this.floorId : "Lx01";

        console.log(floorId);
        // 获取VIP车位列表
        module.upFloor(clickSuccess);
        function clickSuccess(evevt,floorId){
          self.floorName=evevt;
          self.floorId=floorId;
          self.initParkInfo(self.parkMap.floor,self.parkMap.carpos_sum);
          self.getVipCarList(url,self.$BuildId,self.floorId,userId);
        };
        module.addVipIcon(null);
      },
      downFloor(){
        var self=this;
        let url=self.$Api+'/GOSSystem/vipCarList';
        let userId=self.userInfo.user_id;
        module.downFloor(clickSuccess);
        function clickSuccess(event,floorId){//1,name;2,id;
          self.floorName=event;
          self.floorId=floorId;
          self.initParkInfo(self.parkMap.floor,self.parkMap.carpos_sum);
          //
          self.getVipCarList(url,self.$BuildId,self.floorId,userId);
        };
        module.addVipIcon(null);
      },
      //打开警告弹窗
      openDialog(){
        this.dialogVisible=true;
        //暂时没写
      },// 查看车牌信息
      warn(date) {
        this.$message({
          message: date,
          type: 'warning',
          center:true
        });
      },
      specialWarn(){
        this.$message({
          message: '该车为特殊车辆!无权限查看!',
          type: 'warning',
          center:true
        });
      },
      featureWarn(){
        this.$message({
          message: '查看车牌请点击车位!',
          type: 'warning',
          center:true
        });
      },
      hideOverLayer(){
        this.featureDate="";
        //this.popupLayer.setPosition(null);
        this.popupLayer.setPosition(undefined);
      },
      getVipCarList(url,buildId,floorId,userId){//获取Vip车位列表!
        var params = new URLSearchParams();
        params.append('build_id', buildId);
        params.append('floor_id', floorId);
        params.append('user_id', 'beefind001');
        this.$http.post(
          url,
          params,
          {
            timeout:2000,
            headers:{
              'Content-Type':'application/x-www-form-urlencoded'
            }

          }).then((response) => {
          console.log(response);
          //获取屏幕ID之后的逻辑处理
          //response.data;
          if(response.data.result=='1'){
            //&&response.data.screen_list.length>=1
            if(response.data.vipcar_list.length>=1){
              this.vipCarList=[];
              this.vipCarList=response.data.vipcar_list;
            }else{
              this.warn('Vip车位列表为空');
            };

          }else{
            //获取数据失败!
            this.vipCarList=[];
            this.warn('获取VIP车位列表失败!');
          };//


        }).catch((error) => {
          //console.log(error);
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });
      },
      addCarnums() { // 添加车牌到VIP车位
        /*
        * 1.0 获取输入的车牌
        * 1.1 过滤输入的车牌并进行友好提示(验证)
        * 1.2 验证通过?加入车牌列表（最多有三个车牌）arr.push:提示
        * 1.2.1(先验证原来车牌列表是否为3个)
        * 1.2.2 未满足3个?就加入车牌数组push:就提示('最多可添加3个车牌!')
        * 1.2.3 输入的车牌已经添加要进行提示;
        * 1.2.4 加入车牌数组后清空输入的车牌号;
        * */
        const re=/^[\u4e00-\u9fa5]{1}[A-Z]{1}[A-Z_0-9]{5,}$/;

        console.log(this.inputCarnum.length);
        if(this.inputCarnum.length==0){
          this.warn('输入车牌不能为空!');
        }else if(this.inputCarnum.length>=7){
          //
          if(this.inputCarnum.search(re)==-1){
            this.warn('输入车牌不符合规则!');
          }else{
            // 这里只验证了第一个字符为汉字但是并不知道是否符合规则
            if(this.provice.includes(this.inputCarnum.substring(0,1))){
              //这里是输入的符合规则的车牌号
              // 1.2.1
               if(this.vipCar_numbers.length<3){
                 // 1.2.2
                 console.log(this.vipCar_numbers.includes(this.inputCarnum));
                 if(!this.vipCar_numbers.includes(this.inputCarnum)){
                   this.vipCar_numbers.push(this.inputCarnum);
                   // 1.2.4
                   this.inputCarnum='';
                 }else{
                   // 1.2.3
                   this.warn('该车牌已经添加,请输入新的车牌!');
                   this.inputCarnum='';
                 };

               }else{
                 this.warn('最多只能添加3个车牌!');
               };//
            }else{
              this.warn('输入车牌不符合规则!');
            };//

          };

        }else{
          this.warn('输入车牌位数不得少于7位!');
        };//
      },
      confirmSubmit() {
        // 确认添加vip车位信息
        /*
        * 0.9 先隐藏弹框；
        * 1.0 先确认是编辑模式(oldVip车位)还是添加模式(new Vip车位);
        * 1.1 确认是否点击了(选择)VIP车位;选择?进行提交:提示选择VIP车位
        * 1.2 添加车位到VIP列表; 添加成功?刷新获取vip车位列表:提示重新添加
        *
        * */
        this.submitVisible = false;
        console.log('添加模式==>'+this.addModel);
        console.log('编辑模式==>'+this.editModel);

        if(this.addModel){
          // 添加模式
          let url;
          let addDate={};
          addDate.user_id=this.userInfo.user_id;
          addDate.build_id=this.addVipCarArr[0].build_id;
          addDate.floor_id=this.addVipCarArr[0].floor_id;
          addDate.add_carpos={};
          addDate.add_carpos.carpos_name=this.addVipCarArr[0].carNum;
          addDate.add_carpos.car_numbers=this.addVipCarArr[0].car_numbers;
          addDate.add_carpos.carpos_gid=this.addVipCarArr[0].carUID;
          addDate.add_carpos.carpos_areaID=this.addVipCarArr[0].carArea;
          console.log(addDate);
          url = this.$Api+'/GOSSystem/addCarposToVIP';

          this.addCarposToVip(url,addDate);
        }else{
          // 编辑模式
          console.log(this.VipCarInfo);
          let editUrl;
          let editDate={};
          editDate.user_id=this.userInfo.user_id;
          editDate.build_id=this.VipCarInfo.build_id;
          editDate.floor_id=this.VipCarInfo.floor_id;
          editDate.edit_carpos={};
          editDate.edit_carpos.carpos_name=this.VipCarInfo.carNum;
          editDate.edit_carpos.car_numbers=this.VipCarInfo.car_numbers;
          editDate.edit_carpos.carpos_gid=this.VipCarInfo.carUID;
          editDate.edit_carpos.carpos_areaID=this.VipCarInfo.carArea;
          console.log(editDate);
          editUrl = this.$Api+'/GOSSystem/editVIPCarpos';

          this.editVipCar(editUrl,editDate);



        };
      },
      confirmDel() {
        //  删除按钮
        /*
        *
        * */
        this.delVisible = !this.delVisible;
        let deleteUrl;
        let deleteDate={};
        deleteDate.user_id=this.userInfo.user_id;
        deleteDate.build_id=this.VipCarInfo.build_id;
        deleteDate.floor_id=this.VipCarInfo.floor_id;
        deleteDate.delete_carpos={};
        deleteDate.delete_carpos.carpos_name=this.VipCarInfo.carNum;
        deleteDate.delete_carpos.carpos_gid=this.VipCarInfo.carUID;
        deleteDate.delete_carpos.carpos_areaID=this.VipCarInfo.carArea;
        console.log(deleteDate);
        deleteUrl = this.$Api+'/GOSSystem/deleteCarposFromVIP';

        this.deleteCarposFromVip(deleteUrl,deleteDate);

      },
      canaleEdit() {
        // 结束编辑
        /*
        * 0.9 车位信息显示
        * 1.0 更改编辑模式
        * 1.1 显示编辑按钮
        * 1.3 隐藏添加车牌
        * */
        //this.carInfoShow
        this.editModel = false;
        this.edit = true;
        this.carNumShow = false; // 隐藏添加车牌
        this.submitShow = false  //  隐藏提交按钮
      },
      startEdit() {
        /*
        * 开始编辑
        * 1.0 开启编辑模式
        * 1.1 隐藏编辑按钮
        * */
        this.editModel = true;
        this.edit = false;
        this.carNumShow = true; // 显示添加车牌
        this.submitShow = true  //  显示提交按钮
      },
      addVipCarModel() {
        /*
        * 1.0 开启添加模式,并移除VIp车位上的图标;
        * 1.1 隐藏车位信息第2行
        * 1.3 显示 添加车牌
        * 1.4 显示提交按钮
        * 1.5 清空选中的Vip车位信息
        * 1.6 隐藏车位信息框
        * */
        this.addModel = !this.addModel;
        module.addVipIcon(null);
        //this.editModel = !this.editModel;
        this.carNumShow = true;
        if(!this.submitShow){
          this.submitShow = !this.submitShow  // 1.4 显示提交按钮
        };
        //-------------
        this.VipCarInfo = []; // 1.5
        this.carInfoShow = false; // 1.6

      },
      canaleVipCarModel() {
        /*
        *  取消添加模式
        * 1.0 取消添加模式
        * 1.1 显示车位信息第2行
        * 1.2 判断是否为编辑模式
        * 1.3 把选中车位要素删除，并更改颜色;
        * 1.4 清空选中的VIP要素
        * 1.5 隐藏车位信息框
        * */
        this.addModel = !this.addModel;
        //this.editModel = !this.editModel;
        // 非添加模式
        //console.log(this.editModel);
        if(this.editModel){
          //编辑模式
          this.startEdit();
        }else{
          //非编辑模式
          this.canaleEdit();
        };
        //
        this.addVipCarArr = []; // 1.3
        console.log(this.VipCarInfo);
        module.resetFeatureCarColor('#969696',this.VipCarInfo); // 重置车位颜色
        this.carInfoShow = false; // 1.5

      },
      addCarposToVip(url,date) {
        // 添加车位到VIP列表
        var params = new URLSearchParams();
        params.append('build_id', date.build_id);
        params.append('floor_id', date.floor_id);
        params.append('user_id', date.user_id);
        params.append('add_carpos', date.add_carpos);

        this.$http.post(
          url,
          params,
          {
            timeout:2000,
            headers:{
              'Content-Type':'application/x-www-form-urlencoded'
            }

          }).then((response) => {
          console.log(response);
          //添加VIP车位后的逻辑处理
          /*
          * 成功? 处理逻辑：提示
          *  1.0 吟唱弹框
          *  1.1 刷新获取Vip车位列表;
          * */
          if(response.result==1){
            let url=this.$Api+'/GOSSystem/vipCarList';
            let floorId=this.floorId!=null&&this.floorId!=undefined&&this.floorId!="" ? this.floorId : "Lx01";

            console.log(floorId);

            this.getVipCarList(url,this.$BuildId,this.floorId,this.userInfo.user_id);
          }else{
            this.warn('VIP车位添加失败!请重新添加!');
          };




        }).catch((error) => {
          //console.log(error);
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });


      },
      editVipCar(url,date){ // 编辑VIP车位对应的车牌

        var params = new URLSearchParams();
        params.append('build_id', date.build_id);
        params.append('floor_id', date.floor_id);
        params.append('user_id', date.user_id);

        params.append('edit_carpos', date.edit_carpos);

        this.$http.post(
          url,
          params,
          {
            timeout:2000,
            headers:{
              'Content-Type':'application/x-www-form-urlencoded'
            }

          }).then((response) => {
          console.log(response);
          //编辑VIP车位的逻辑处理
          /*
          *
          * */
          if(response.data.result=='1'){
             // 编辑VIP车位成功!
             /*
             * 1.0 刷新VIP车位列表;
             *
             * */
          }else{
            //编辑VIP车位失败!
            this.warn('编辑VIP车位失败!');
          };//


        }).catch((error) => {
          //console.log(error);
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });

      },
      deleteCarposFromVip(url,date) {
        // 删除列表中的VIP车位
        var params = new URLSearchParams();
        params.append('build_id', date.build_id);
        params.append('floor_id', date.floor_id);
        params.append('user_id', date.user_id);

        params.append('delete_carpos', date.delete_carpos);
        this.$http.post(
          url,
          params,
          {
            timeout:2000,
            headers:{
              'Content-Type':'application/x-www-form-urlencoded'
            }

          }).then((response) => {
          console.log(response);
          //删除VIP车位的逻辑处理
          /*
          *
          * */
          if(response.data.result=='1'){
            // 删除VIP车位成功!
            /*
            * 1.0 刷新VIP车位列表;
            *
            * */
            let url=this.$Api+'/GOSSystem/vipCarList';
            console.log(url);
            let floorId=this.floorId!=null&&this.floorId!=undefined&&this.floorId!="" ? this.floorId : "Lx01";
            console.log(floorId);
            // 获取VIP车位列表

            this.getVipCarList(url,this.$BuildId,this.floorId,this.userInfo.user_id);
          }else{
            //编辑VIP车位失败!
            this.warn('删除VIP车位失败!');
          };//


        }).catch((error) => {
          //console.log(error);
          this.$notify({
            title: 'ERROR',
            message: `${error}`,
            duration: 2000,
            type: 'error'
          });
        });

      },
      filterFeature(data){ //往数组中添加不存在的要素;
        //
        let that=this;
        let fDate = data;
        //
        let arr=that.addVipCarArr;
        function checkAdult(arr){
          return arr == fDate;
        };
        //
        console.log(that.addVipCarArr.length);
        if(that.addVipCarArr.length<=0){//数组是否为空?添加:过滤添加;
          that.addVipCarArr.push(fDate);
        }else{
          //是否重复点击统一给车位?取消添加，更改颜色，删除要素;:添加要素
          console.log(!that.addVipCarArr.some(checkAdult));

          if(!that.addVipCarArr.some(checkAdult)){
            that.addVipCarArr.splice(0,1);
            that.addVipCarArr.push(fDate);
          }else{
            that.addVipCarArr.pop(fDate);
            that.VipCarInfo={}; //点击同一个车位，清空车位信息
            fDate.setCarColor('#969696');//1.3

          };

        };//
        console.log(that.addVipCarArr);

      }





    }
  }
</script>

<style scoped lang="scss">
  .par-state{
    position: absolute;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: stretch;
    height: calc(100% - 120px);
    width: calc(100% - 226px);
    /*border: 1px solid #FF0000;*/
    .state-one{
      order: 1;
      overflow-y: auto;
      flex: 2 0 auto;
      border-radius: 3px;
      background: #fff;
      margin-right: 10px;
      display: flex;
      flex-direction: column;
      /*border: 1px solid #ff3b52;*/
      .state-top{
        flex: 1 0 auto;
        align-items: center;
        display: flex;
        align-self: center;
        /*border:1px solid #00FF00;*/
        .state-round{
          text-align: center;
          line-height: 160px;
          color: #fff;
          font-size: 36px;
          background: linear-gradient(180deg, #fdada2 0px, #ff999d 100%) center center / cover;
          border-radius: 50%;
          width: 160px;
          height: 160px;
          /*border: 1px solid #ff3b52;*/
        }
        .state-box{
          height: 9px;
          border-radius: 10px;
          width: 100px;
          margin: 0 auto;
          -webkit-box-shadow: 0px 10px 10px #ffc4c8;
          box-shadow: 0px 21px 25px #ffc4c8;
          position: relative;
          top: -15px;
          /* z-index: 111; */
        }
      }
      .state-bottom{
        flex: 1 0 auto;
        /*border:1px solid #00FF00;*/
        width: 400px;
        margin: auto;
        position: relative;
        justify-content: flex-start;
        div:nth-child(1){
          border:1px solid #cccccc;
          min-height: 200px;
          height: auto;
          ul{
            /*border:1px solid #0000FF;*/
            min-height: 200px;
            /*height: 100%;*/
            li:nth-child(1){
              /*border:1px solid #00FF00;*/
              height: 35px;
              line-height: 35px;
              text-align: center;
              background: #d3d3d3;
            }
            li:nth-child(2){
              /*border:1px solid #00FF00;*/
              height: auto;
              max-height: 165px;
              overflow-x: hidden;
              overflow-y: auto;
              display: flex;
              flex-wrap: wrap;
              span{
                width: 60px;
                height: 26px;
                line-height: 26px;
                text-align: center;
                color: white;
                border-radius: 30px;
                margin: 3px  7.8px;
                /*display: inline-block;*/
                background: #ffc6ee;
              }
            }
          }
        }
        div:nth-child(2){
          margin-top: 20px;
          border:1px solid #cccccc;
          min-height: 200px;
          height: auto;
          ul{
            /*border:1px solid #0000FF;*/
            min-height: 200px;
            /*height: 100%;*/
            li{
              /*border:1px solid #00FF00;*/
              height: 35px;
              line-height: 35px;
              padding: 0px 10px;
            }
            li:nth-child(1){
              /*border:1px solid #00FF00;*/
              height: 35px;
              line-height: 35px;
              text-align: center;
              background: #d3d3d3;
            }
            li:nth-child(2){
              /*border:1px solid #0000ff;*/
              height: 35px;
              /*line-height: 35px;*/
              button{
                margin-left: 20px;
                height: 25px;
                vertical-align: middle;
                text-align: center;
                line-height: 9px;
              }
            }
            li:nth-child(4){
              /*border:1px solid #ff0000;*/
              span{
                margin:0px 5px;
                /*border:1px solid #ff0000;*/
                font-size: 13px;
              }
            }
            li:nth-child(5){
              width: 100%;
              /*border:1px solid #008899;*/
              display: block;
              .elInput{
                display: inline-block;
                text-align: center;
                height: 30px;
                width: 50%;
                border: none;
              }
            }
            li:nth-child(6){
              /*border:1px solid #ff0000;*/
              button{
                height: 25px;
                text-align: center;
                line-height: 10px;
              }
            }
          }
        }

      }
    }
    .state-tor{
      order: 9;
      border-radius: 3px;
      background: #fff;
      flex: 9 0 auto;
      text-align: center;
      position: relative;
      /*border:1px solid #ff3b52;*/
      .the-map{
        position: absolute;
        width: 100%;
        height: 100%;
        /*border:1px solid #ff3b52;*/
      }
      .button{
        position: fixed;
        right: 5px;
        float: right;
        width: 10%;
        height: 50px;
        line-height: 50px;
        /*border:1px solid black;*/
      }
      .buttonSon{
        /*border:1px solid #ff0000;*/
        text-align: center;
        .sonbt{
          /*border:1px solid #00FF00;*/
        }
      }
      #floorUl li{
        width: 35px;
        height: 35px;
        overflow: hidden;
      }
      #floor{
        /*border: 1px solid #ff0000;*/
        width: 35px;
        height: 35px;
        overflow: hidden;
        position: absolute;
        bottom: 200px;

      }
      .up{
        width: 35px;
        height: 35px;
        line-height: 35px;
        text-align: center;
        /*border:1px solid red;*/
        position: absolute;
        right: 20px;
        bottom:235px;
        z-index: 2010;
      }
      .down{
        width: 35px;
        height: 35px;
        line-height: 35px;
        text-align: center;
        /*border:1px solid red;*/
        position: absolute;
        right: 20px;
        bottom:165px;
        z-index: 2010;
      }
      .map-button{
        position: absolute;
        top: 50%;
        right: 0px;
        height: 58px;
        width: 58px;
        border-radius: 50%;
        transform: translate(-58%, -36%);
        color: #745fea;
        background: #ded8fe;
        border: 1px solid #745fea;
        transition: ease-in-out 0.4s;
        &:hover{
          background: #745fea;
          color: #fff;
          box-shadow: 0px 0px 5px #745fea;
        }
      }
    }
  }
  #popHeader{
    text-align: center;
  }

  #popup{
    width: 154px;
    height: 120px;
    position: absolute;
    z-index: 2015;
    border:1px solid #7460ee;
    border-radius: 3px;
    overflow: hidden;
    /*-webkit-filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
    filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));*/
  }
  .popDiv{
    position: relative;
    width: 154px;
    height: 30px;
    line-height: 30px;
    top: 0px;
    /*line-height: 30px;*/
    border: 0.5px solid #cccccc;
    background: white;
    font-size: 8px;
    overflow-y: hidden;
    text-align: center;
  }
  .popBt{
    height: 21px;
    width: 35%;
    line-height: 0px;
    /*border:1px solid #ffcc66;*/
    /*margin-bottom: 10px;*/
  }
  #imgButton{
    float: right;
    line-height: 5px;
    font-size: 9px;
  }
  #imgButton:active{
    background: #cccccc;
  }
  .popDiv img{
    margin-left: 5px;
    width: 14px;
  }
  #i-error{
    float: right;
    line-height: 30px;
  }
  .imgSrcDialog{
    /*border: 1px solid #ff3b52;*/
  }
  .map-img{
    width: 100%;
    text-align: center;
    /*border: 1px solid #ff3b52;*/
  }
  .map-img img{
    width: 100%;
    display: inline-block;
    /*border:1px solid #ff3b52;*/
  }
</style>
